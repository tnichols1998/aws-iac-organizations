name: Deploy AWS Organizations Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'config/**'
      - 'modules/**'  
      - 'environments/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'config/**'
      - 'modules/**'
      - 'environments/**'
      - '.github/workflows/**'

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Validate Petunka Holdings configuration
      run: |
        python scripts/validate-config.py config/organizations/petunka-holdings.yaml
        
    - name: Validate Personal Accounts configuration
      run: |
        python scripts/validate-config.py config/organizations/personal-accounts.yaml
        
    - name: Validate Example configuration
      run: |
        python scripts/validate-config.py config/organizations/example.yaml

  terraform-qa:
    name: Deploy to QA (${{ vars.ORGANIZATION_NAME }})
    runs-on: ubuntu-latest
    environment: qa
    needs: validate
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-${{ vars.ORGANIZATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Verify AWS Connection
      run: |
        echo "Connected to AWS Account: $(aws sts get-caller-identity --query Account --output text)"
        echo "Using Role: $(aws sts get-caller-identity --query Arn --output text)"
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.6.0"
        
    - name: Check Terraform formatting
      run: |
        echo "üé® Checking Terraform formatting..."
        
        # Check if any files need formatting (fail if not formatted)
        if ! tofu fmt -recursive -check .; then
          echo "‚ùå Terraform files are not properly formatted"
          echo "üí° Run 'tofu fmt -recursive .' locally and commit the changes"
          echo "üìã Files that need formatting:"
          tofu fmt -recursive -diff .
          exit 1
        else
          echo "‚úÖ All Terraform files are properly formatted"
        fi
        
    - name: Setup Python for validation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Validate specific organization configuration
      run: |
        python scripts/validate-config.py ${{ vars.TF_VAR_organization_config }}
        
    - name: Terraform Init
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        tofu init
        
    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "Planning ${{ vars.ORGANIZATION_NAME }} organization in ${{ vars.ENVIRONMENT_NAME }} environment"
        tofu plan -no-color -out=tfplan
        
    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        script: |
          const output = `### Terraform Plan for QA (${{ vars.ORGANIZATION_NAME }})
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          **Environment**: ${{ vars.ENVIRONMENT_NAME }}
          **Organization**: ${{ vars.ORGANIZATION_NAME }}
          **Config**: ${{ vars.TF_VAR_organization_config }}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
        
    - name: Terraform Apply (QA)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "Deploying ${{ vars.ORGANIZATION_NAME }} organization to ${{ vars.ENVIRONMENT_NAME }}"
        tofu apply tfplan
        
    - name: Output deployment info
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "### QA Deployment Summary"
        echo "**Organization**: ${{ vars.ORGANIZATION_NAME }}"
        echo "**Environment**: ${{ vars.ENVIRONMENT_NAME }}"
        echo "**AWS Account**: ${{ secrets.AWS_ACCOUNT_ID }}"
        tofu output

  terraform-prod:
    name: Deploy to Production (${{ vars.ORGANIZATION_NAME }})
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-qa
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-${{ vars.ORGANIZATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Verify AWS Connection
      run: |
        echo "Connected to AWS Account: $(aws sts get-caller-identity --query Account --output text)"
        echo "Using Role: $(aws sts get-caller-identity --query Arn --output text)"
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.6.0"
        
    - name: Check Terraform formatting
      run: |
        echo "üé® Checking Terraform formatting..."
        
        # Check if any files need formatting (fail if not formatted)
        if ! tofu fmt -recursive -check .; then
          echo "‚ùå Terraform files are not properly formatted"
          echo "üí° Run 'tofu fmt -recursive .' locally and commit the changes"
          echo "üìã Files that need formatting:"
          tofu fmt -recursive -diff .
          exit 1
        else
          echo "‚úÖ All Terraform files are properly formatted"
        fi
        
    - name: Setup Python for validation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Validate specific organization configuration
      run: |
        python scripts/validate-config.py ${{ vars.TF_VAR_organization_config }}
        
    - name: Create Production Environment (if needed)
      run: |
        if [ ! -d "environments/prod" ]; then
          echo "Creating prod environment from qa template"
          cp -r environments/qa environments/prod
          # Update any environment-specific backend config if needed
          sed -i 's/qa/prod/g' environments/prod/backend-prod.conf 2>/dev/null || true
        fi
        
    - name: Terraform Init (Production)
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        tofu init
        
    - name: Terraform Plan (Production)
      id: plan-prod
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "Planning ${{ vars.ORGANIZATION_NAME }} organization in ${{ vars.ENVIRONMENT_NAME }} environment"
        tofu plan -no-color -out=tfplan
        
    - name: Terraform Apply (Production)
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "Deploying ${{ vars.ORGANIZATION_NAME }} organization to ${{ vars.ENVIRONMENT_NAME }}"
        tofu apply tfplan
        
    - name: Output deployment info
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "### Production Deployment Summary"
        echo "**Organization**: ${{ vars.ORGANIZATION_NAME }}"
        echo "**Environment**: ${{ vars.ENVIRONMENT_NAME }}"
        echo "**AWS Account**: ${{ secrets.AWS_ACCOUNT_ID }}"
        tofu output
        
    - name: Create deployment summary
      run: |
        echo "## Deployment Complete! üöÄ" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Production Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Organization**: ${{ vars.ORGANIZATION_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ vars.ENVIRONMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Account**: ${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Config File**: ${{ vars.TF_VAR_organization_config }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${GITHUB_SHA}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${GITHUB_ACTOR}" >> $GITHUB_STEP_SUMMARY
