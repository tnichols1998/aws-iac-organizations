name: PR Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'config/**'
      - 'modules/**'  
      - 'environments/**'
      - '.github/workflows/**'

jobs:
  validate-configs:
    name: Validate All Configurations
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Validate all organization configurations
      run: |
        echo "üîç Validating all organization configurations..."
        
        for config in config/organizations/*.yaml; do
          if [ -f "$config" ]; then
            echo "Validating $config..."
            python scripts/validate-config.py "$config"
            echo "‚úÖ $config is valid"
          fi
        done
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.6.0"
        
    - name: Check Terraform formatting
      run: |
        echo "üé® Checking Terraform formatting..."
        
        # Check if any files need formatting
        if ! tofu fmt -recursive -check .; then
          echo "‚ùå Terraform files are not properly formatted"
          echo "üí° Run 'tofu fmt -recursive .' locally to fix formatting"
          echo "üìã Files that need formatting:"
          tofu fmt -recursive -diff .
          exit 1
        else
          echo "‚úÖ All Terraform files are properly formatted"
        fi
        
    - name: Check for syntax errors in Terraform
      run: |
        echo "üîç Checking Terraform syntax..."
        
        # Check syntax in all Terraform files
        for dir in environments/*/ modules/*/; do
          if [ -d "$dir" ] && [ -f "$dir/main.tf" ]; then
            echo "Checking syntax in $dir..."
            cd "$dir"
            tofu init -backend=false
            tofu validate
            cd - > /dev/null
          fi
        done

  plan-qa:
    name: Plan QA Changes
    runs-on: ubuntu-latest
    environment: qa
    needs: validate-configs
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: pr-plan-${{ github.event.number }}-${{ vars.ORGANIZATION_NAME }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Verify AWS Connection
      run: |
        echo "üì° Connected to AWS Account: $(aws sts get-caller-identity --query Account --output text)"
        echo "üîë Using Role: $(aws sts get-caller-identity --query Arn --output text)"
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.6.0"
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Validate organization configuration
      run: |
        python scripts/validate-config.py ${{ vars.TF_VAR_organization_config }}
        
    - name: Terraform Init
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        tofu init
        
    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_organization_config: ${{ vars.TF_VAR_organization_config }}
        TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      run: |
        cd environments/${{ vars.TF_VAR_environment }}
        echo "üîÆ Planning changes for ${{ vars.ORGANIZATION_NAME }} organization in ${{ vars.ENVIRONMENT_NAME }} environment"
        
        # Capture plan output
        tofu plan -no-color -detailed-exitcode > plan.txt 2>&1 || export PLAN_EXIT=$?
        
        # Check plan results
        if [ "${PLAN_EXIT}" == "1" ]; then
          echo "‚ùå Terraform plan failed"
          cat plan.txt
          exit 1
        elif [ "${PLAN_EXIT}" == "2" ]; then
          echo "üìã Changes detected in plan"
          echo "PLAN_HAS_CHANGES=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ No changes detected"
          echo "PLAN_HAS_CHANGES=false" >> $GITHUB_OUTPUT
        fi
        
        # Save plan output for comment
        echo 'PLAN_OUTPUT<<EOF' >> $GITHUB_OUTPUT
        cat plan.txt >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
    - name: Comment Plan on PR
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = `${{ steps.plan.outputs.PLAN_OUTPUT }}`;
          const hasChanges = '${{ steps.plan.outputs.PLAN_HAS_CHANGES }}' === 'true';
          const emoji = hasChanges ? 'üìã' : '‚úÖ';
          const status = hasChanges ? 'Changes Detected' : 'No Changes';
          
          const output = `### ${emoji} Terraform Plan Results - QA (${{ vars.ORGANIZATION_NAME }})
          
          **Status**: ${status}
          **Environment**: ${{ vars.ENVIRONMENT_NAME }}
          **Organization**: ${{ vars.ORGANIZATION_NAME }}
          **Config**: ${{ vars.TF_VAR_organization_config }}
          **AWS Account**: ${{ secrets.AWS_ACCOUNT_ID }}
          
          <details><summary>üìã Show Terraform Plan Output</summary>
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          
          </details>
          
          ---
          
          ${hasChanges ? '‚ö†Ô∏è **This PR will make changes to your AWS infrastructure when merged.**' : '‚úÖ **This PR will not make any infrastructure changes.**'}
          
          **Next Steps**:
          ${hasChanges ? 
            '- Review the planned changes carefully\n- Merge this PR to apply changes to QA first, then Production' : 
            '- This PR is safe to merge with no infrastructure impact'
          }`;
          
          // Find existing comment and update it, or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('Terraform Plan Results - QA')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          }

  security-check:
    name: Security & Compliance Check
    runs-on: ubuntu-latest
    needs: validate-configs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive data
      run: |
        echo "üîç Checking for sensitive data in configurations..."
        
        # Check for potential secrets or sensitive data
        if grep -r -E "(password|secret|key|token)" config/ --exclude-dir=.git || true; then
          echo "‚ö†Ô∏è Found potential sensitive data in configuration files"
          echo "Please review and ensure no actual secrets are committed"
        else
          echo "‚úÖ No obvious sensitive data found"
        fi
        
    - name: Validate email formats
      run: |
        echo "üìß Validating email formats in configurations..."
        
        # Check that all account emails follow the expected pattern
        python -c "
        import yaml
        import re
        import sys
        
        email_pattern = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
        issues = []
        
        for config_file in ['config/organizations/petunka-holdings.yaml', 'config/organizations/personal-accounts.yaml', 'config/organizations/example.yaml']:
          try:
            with open(config_file) as f:
              config = yaml.safe_load(f)
              
            for account in config.get('accounts', []):
              email = account.get('email', '')
              if not email_pattern.match(email):
                issues.append(f'{config_file}: Invalid email format: {email}')
                
          except Exception as e:
            issues.append(f'Error reading {config_file}: {e}')
        
        if issues:
          print('‚ùå Email validation issues found:')
          for issue in issues:
            print(f'  - {issue}')
          sys.exit(1)
        else:
          print('‚úÖ All email formats are valid')
        "
        
    - name: Check organization structure
      run: |
        echo "üèóÔ∏è Validating organization structure consistency..."
        
        python -c "
        import yaml
        import sys
        
        for config_file in ['config/organizations/petunka-holdings.yaml', 'config/organizations/personal-accounts.yaml']:
          try:
            with open(config_file) as f:
              config = yaml.safe_load(f)
            
            # Check that all accounts reference valid OUs
            ou_names = {ou['name'] for ou in config.get('organizational_units', [])}
            
            for account in config.get('accounts', []):
              ou = account.get('ou')
              if ou and ou not in ou_names:
                print(f'‚ùå {config_file}: Account {account.get(\"name\")} references invalid OU: {ou}')
                sys.exit(1)
            
            print(f'‚úÖ {config_file}: Organization structure is valid')
                
          except Exception as e:
            print(f'‚ùå Error validating {config_file}: {e}')
            sys.exit(1)
        "
